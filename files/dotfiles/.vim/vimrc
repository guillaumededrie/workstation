call plug#begin('~/.vim/plugged')

Plug 'NLKNguyen/papercolor-theme'
Plug 'airblade/vim-gitgutter', { }
Plug 'dense-analysis/ale', { }
Plug 'ekalinin/Dockerfile.vim', { }
Plug 'jiangmiao/auto-pairs'
Plug 'junegunn/fzf.vim'
Plug 'lervag/vimtex', { 'for': ['tex'] }
Plug 'ludovicchabant/vim-gutentags'
Plug 'majutsushi/tagbar'
Plug 'mattn/emmet-vim', { 'for': ['html'] }
Plug 'mbbill/undotree'
Plug 'pearofducks/ansible-vim', { 'for': ['ansible'] }
Plug 'preservim/nerdcommenter', {  }
Plug 'preservim/nerdtree', { 'on': ['NERDTreeFind', 'NERDTreeToggle'] }
Plug 'ryanoasis/vim-devicons'
Plug 'tiagofumo/vim-nerdtree-syntax-highlight' " Required to prevent using vim-devicons with only pink color
Plug 'tpope/vim-fugitive', {  }
Plug 'tpope/vim-sensible', {  }
Plug 'tpope/vim-sleuth'
Plug 'tpope/vim-surround', {  }
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'vim-scripts/indentpython.vim'
Plug 'vim-syntastic/syntastic', {  }
Plug 'ycm-core/YouCompleteMe', { 'do': './install.py' }

call plug#end()

" General
let mapleader = ','

set nocompatible
syntax enable
set encoding=UTF-8

filetype plugin indent on
set showmode                    " Display the current mode
set cursorline                  " Highlight current line
highlight clear SignColumn      " SignColumn should match background
highlight clear LineNr          " Current line number row will have same background color in relative mode


set mouse=a                 " Automatically enable mouse usage
set mousehide               " Hide the mouse cursor while typing
scriptencoding utf-8
set virtualedit=onemore             " Allow for cursor beyond last character
set modeline
set backspace=indent,eol,start  " Backspace for dummies
set linespace=0                 " No extra spaces between rows
set number                      " Line numbers on
set showmatch                   " Show matching brackets/parenthesis
set incsearch                   " Find as you type search
set hlsearch                    " Highlight search terms
set winminheight=0              " Windows can be 0 line high
set ignorecase                  " Case insensitive search
set smartcase                   " Case sensitive when uc present
set wildmenu                    " Show list instead of just completing
set wildmode=list:longest,full  " Command <Tab> completion, list matches, then longest common part, then all.
set whichwrap=b,s,h,l,<,>,[,]   " Backspace and cursor keys wrap too
set scrolljump=5                " Lines to scroll when cursor leaves screen
set scrolloff=3                 " Minimum lines to keep above and below cursor
set foldenable                  " Auto fold code
set list
set listchars=tab:›\ ,trail:•,extends:#,nbsp:. " Highlight problematic whitespaceV

" Formating
set nowrap                      " Do not wrap long lines
set smartindent                 " Indent at the same level of the previous line
set breakindent
set gdefault
set autoread
set shiftwidth=4                " Use indents of 4 spaces
set expandtab                   " Tabs are spaces, not tabs
set tabstop=4                   " An indentation every four columns
set softtabstop=4               " Let backspace delete indent
set nojoinspaces                " Prevents inserting two spaces after punctuation on a join (J)
set splitright                  " Puts new vsplit windows to the right of the current
set splitbelow                  " Puts new split windows to the bottom of the current
set pastetoggle=<F12>           " pastetoggle (sane indentation on pastes)


" Backup/Undo
let dir_list = {
    \ 'backup': 'backupdir',
    \ 'views': 'viewdir',
    \ 'swap': 'directory',
    \ 'undo': 'undodir' }

for [dirname, settingname] in items(dir_list)
    let directory = $HOME . '/.vim/' . dirname .'/'
    if !isdirectory(directory)
        call mkdir(directory)
    endif
    let directory = substitute(directory, " ", "\\\\ ", "g")
    exec "set " . settingname . "=" . directory
endfor

set hidden
set undolevels=1000
set undoreload=10000


"make < > shifts keep selection
vnoremap < <gv
vnoremap > >gv


" Papercolor theme
set t_Co=256
set background=dark
colorscheme PaperColor


" Vim Airline configuration (statusline)
let g:airline_theme='papercolor'
let g:airline_powerline_fonts = 1


" Fugitive
nnoremap <silent> <leader>gd :Git diff<CR>
nnoremap <silent> <leader>gb :Git blame<CR>
nnoremap <silent> <leader>gl :Git log<CR>

" Ident guide
let g:indent_guides_start_level = 2
let g:indent_guides_guide_size = 1
let g:indent_guides_enable_on_vim_startup = 1

" NerdTree
map <C-e> <plug>NERDTreeTabsToggle<CR>
map <leader>e :NERDTreeToggle<CR>
nmap <leader>nt :NERDTreeFind<CR>

let NERDTreeShowBookmarks=1
let NERDTreeIgnore=['\.py[cd]$', '\~$', '\.swo$', '\.swp$', '^\.git$', '^\.hg$', '^\.svn$', '\.bzr$']
let NERDTreeChDirMode=0
let NERDTreeQuitOnOpen=1
let NERDTreeMouseMode=2
let NERDTreeShowHidden=1
let NERDTreeKeepTreeInNewTab=1
let g:nerdtree_tabs_open_on_gui_startup=0

" Python
autocmd BufRead,BufNewFile *.py
    \ set tabstop=4 |
    \ set softtabstop=4 |
    \ set shiftwidth=4 |
    \ set textwidth=88 |
    \ set expandtab |
    \ set autoindent |
    \ set fileformat=unix


" UndoTree
nnoremap <F5> :UndotreeToggle<cr>


" CTags
nnoremap <leader>t :execute 'tjump ' . expand('<cword>')<CR>
nnoremap <leader>vt :vsp <CR>:execute 'tjump ' . expand('<cword>')<CR>


" FZF
nmap <silent> <C-P> :<C-u>FZF<CR>


" ALE
let g:ale_linters = {
\   'python': ['bandit', 'flake8', 'pylint'],
\}

let g:ale_fixers = {
\   '*': ['remove_trailing_lines', 'trim_whitespace'],
\   'python': ['add_blank_lines_for_python_control_statements', 'black', 'isort'],
\}
